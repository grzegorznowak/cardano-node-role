---

# vars available:
# quantity          how many tokens do we need
# name              name of the token
# wallet_addr       the address to use
# payment_skey      skey correlated with the wallet_addr
# policy_name       name of the policy used to create this asset
# cardano_bin_path  cardano-cli path
# mint_to           an address where minted tokens will be sent to

- name: "Ops | Native Asset {{ name }} | Make sure we're on a synced node"
  assert_cardano_synced:
    cardano_node_socket: "{{ cardano_node_socket }}"
    cardano_bin_path: "{{ cardano_bin_path }}"
    active_network: "{{ active_network }}"
    testnet_magic: "{{ network_magic }}"  # only used on testnet
  retries: 600
  delay: 24    # wait up to 4h for full sync
  become: true
  become_user: "{{ cardano_user }}"
  register: sync_check_result
  until: sync_check_result.progress | int == 100

- name: "Ops | Native Asset {{ name }} | Double check node is indeed synced"
  assert:
    that:
      - (sync_check_result.progress | int) == 100

- name: "Ops | Native Asset {{ name }} | Create or grab the policy"
  cardano_policy:
    cardano_bin_path: "{{ cardano_bin_path }}"
    name: "{{ policy_name }}"
  become: true
  become_user: "{{ cardano_user }}"
  register: policies_results

- name: "Ops | Native Asset {{ name }} | Pre-calc variables"
  set_fact:
    # 2 ADA, because otherwise we might be having hard time sending anything
    dummy_fee: 2000000
    dummy_output: 0  # for initial fee cals
    policy_id: "{{ policies_results['policies_ids'][policy_name] }}"
    policy_skey: "{{ policies_results['policies'][policy_name]['skey'] }}"
    policy_script: "{{ policies_results['policies'][policy_name]['script'] }}"

# since set_fact can't depend on the vars it defines itself, we need the second round here
- name: "Ops | Native Asset {{ name }} | memoize asset's full name (with policy ID)"
  set_fact:
    asset_policy_name: "{{ policy_id }}.{{ name }}"  # token name with policy id as needed by utxo
    asset_path: "{{ cardano_assets_directory }}/native/{{ policy_id }}.{{ name }}"

- name: "Ops | Native Asset {{ name }} | Grab existing tokens"
  cardano_token_lookup:
    cardano_node_socket: "{{ cardano_node_socket }}"
    cardano_bin_path: "{{ cardano_bin_path }}"
    active_network: "{{ active_network }}"
    testnet_magic: "{{ network_magic }}"  # only used on testnet
    address: "{{ wallet_addr }}"
  register: existing_tokens

- name: "Ops | Native Asset {{ name }} | Set amount of tokens owned to 0 since we don't have it"
  set_fact:
    existing_quantity: 0
  when: existing_tokens.tokens[asset_policy_name] is not defined

- name: "Ops | Native Asset {{ name }} | Calculate token amount we have"
  set_fact:
    existing_quantity: "{{ existing_tokens.tokens[asset_policy_name] }}"
  when: existing_tokens.tokens[asset_policy_name] is defined

- name: "Ops | Native Asset {{ name }} | Wrap Asset Creation"
  block:

    - name: "Ops | Native Asset {{ name }} | Compile network params (testnet)"
      set_fact:
        network_param: "testnet-magic {{ network_magic }}"
      when: active_network == "test"

    - name: "Ops | Native Asset {{ name }} | Compile network params (mainnet)"
      set_fact:
        network_param: "mainnet"
      when: active_network == "main"

    - name: "Ops | Native Asset {{ name }} | Create paths"
      file:
        path: "{{ asset_path }}"
        state: directory
        owner: "{{ cardano_user }}"
        group: "{{ cardano_group }}"
        mode: '0775'

    - name: "Ops | Native Asset {{ name }} | Wait until we have at least {{ dummy_fee }} lovelace in {{ wallet_addr }}"
      assert_address_funded:
        cardano_node_socket: "{{ cardano_node_socket }}"
        cardano_bin_path: "{{ cardano_bin_path }}"
        active_network: "{{ active_network }}"
        max_tx: "{{ cardano_max_tx }}"
        testnet_magic: "{{ network_magic }}"  # only used on testnet
        address: "{{ wallet_addr }}"
        expected_lovelace: "{{ dummy_fee }}"
      become: true
      become_user: "{{ cardano_user }}"
      register: lovelace_result
      retries: 60
      delay: 10    # wait up to 10 min for wallet to be funded
      until: lovelace_result.lovelace | int >= dummy_fee

    - name: "Ops | Native Asset {{ name }} | Calc lovelace we have"
      set_fact:
        lovelace_had: "{{ lovelace_result.lovelace }}"

    - name: "Ops | Native Asset {{ name }} | Create tx-in based on the dummy fee"
      cardano_tx:
        cardano_node_socket: "{{ cardano_node_socket }}"
        cardano_bin_path: "{{ cardano_bin_path }}"
        active_network: "{{ active_network }}"
        testnet_magic: "{{ network_magic }}"  # only used on testnet
        lovelace_amount: "{{ dummy_fee }}"
        token_amount: "{{ dummy_fee }}"
        token: 'lovelace'  # just to make it clear which token we are using for this transaction
        out_amount: "{{ lovelace_had | int - dummy_fee | int }}"
        address: "{{ wallet_addr }}"
        max_tx_count: "{{ cardano_max_tx }}"
      register: tx_result

    # account for the fact that the tail of it can be blank, and augment with + sign only when needed
    - name: "Ops | Native Asset {{ name }} | Compile tx out for minting"
      set_fact:
        tx_out: "{{ [quantity+' '+policy_id+'.'+name, tx_result.tx_out_formatted] |
          select() | join(' + ') }}"

    - name: "Ops | Native Asset {{ name }} | Build raw transaction"
      command: >-
        {{ cardano_bin_path }}/cardano-cli transaction build-raw
        --fee {{ dummy_fee }}
        {{ tx_result.tx_in_formatted }}
        --tx-out {{ wallet_addr }}+{{ dummy_output }}+"{{ tx_out }}"
        --mint="{{ quantity | int - existing_quantity | int }} {{ policy_id }}.{{ name }}"
        --minting-script-file {{ policy_script }}
        --out-file {{ asset_path }}/matx.raw
      become: true
      become_user: "{{ cardano_user }}"
      register: raw_build

    - name: "Ops | Native Asset {{ name }} | Create protocol.json"
      command: >-
        {{ cardano_bin_path }}/cardano-cli
        query protocol-parameters --{{ network_param }}
        --out-file {{ asset_path }}/protocol.json
      environment:
        CARDANO_NODE_SOCKET_PATH: "{{ cardano_node_socket }}"
      become: true
      become_user: "{{ cardano_user }}"

    - name: "Ops | Native Asset {{ name }} | Calculate the actual fee"
      shell: >-
        {{ cardano_bin_path }}/cardano-cli
        transaction calculate-min-fee --tx-body-file {{ asset_path }}/matx.raw
        --tx-in-count {{ tx_result.txs_in_used }}
        --tx-out-count 1 --witness-count 2
        --{{ network_param }}
        --protocol-params-file {{ asset_path }}/protocol.json | cut -d " " -f1
      become: true
      become_user: "{{ cardano_user }}"
      register: actual_fee

    - name: "Ops | Native Asset {{ name }} | Calculate the final amount after fee"
      set_fact:
        final_amount: "{{ tx_result.lovelace_available | int - (actual_fee.stdout | int) }}"

    - name: "Ops | Native Asset {{ name }} | Make sure we can afford minting in terms of ada balance"
      assert:
        that:
          - final_amount > 0

    - name: "Ops | Native Asset {{ name }} | Build the final transaction"
      command: >-
        {{ cardano_bin_path }}/cardano-cli transaction build-raw
        --fee {{ actual_fee.stdout | int }}
        {{ tx_result.tx_in_formatted }}
        --tx-out {{ wallet_addr }}+{{ final_amount }}+"{{ tx_out }}"
        --mint="{{ quantity | int - existing_quantity | int }} {{ policy_id }}.{{ name }}"
        --minting-script-file {{ policy_script }}
        --out-file {{ asset_path }}/matx.raw
      become: true
      become_user: "{{ cardano_user }}"
      register: final_transaction

    - name: "Ops | Native Asset {{ name }} | Sign the transaction"
      command: >-
        {{ cardano_bin_path }}/cardano-cli transaction sign
        --signing-key-file {{ payment_skey }}
        --signing-key-file {{ policy_skey }}
        --{{ network_param }}
        --tx-body-file {{ asset_path }}/matx.raw
        --out-file {{ asset_path }}/matx.signed
      become: true
      become_user: "{{ cardano_user }}"
      register: signing_result

    - name: "Ops | Native Asset {{ name }} | Submit the transaction"
      tx_submit_until_success:
        signed_tx: "{{ asset_path }}/matx.signed"
        network_param: "{{ network_param }}"
        token_name: "{{ asset_policy_name }}"
        quantity: "{{ quantity }}"
        cardano_node_socket: "{{ cardano_node_socket }}"
        cardano_bin_path: "{{ cardano_bin_path }}"
        active_network: "{{ active_network }}"
        testnet_magic: "{{ network_magic }}"  # only used on testnet
        address: "{{ wallet_addr }}"
      environment:
        CARDANO_NODE_SOCKET_PATH: "{{ cardano_node_socket }}"
      become: true
      become_user: "{{ cardano_user }}"
      register: submit_result
      retries: "{{ cardano_max_tx_submit_retry }}"   # try re-submitting the transaction that many times
      delay: 60    # wait up to 10 min to pick up the transaction
      until: submit_result.lookup_result.tokens[asset_policy_name] is defined and
             submit_result.lookup_result.tokens[asset_policy_name] | int >= (quantity | int)

  when: existing_quantity | int < quantity | int
