---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: false
  vars:
    ssh_user: root
    ssh_port: 22

    keypair_name: molecule_key
    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"

    # we test Operations against pre-built cardano node, that is already synced to some extend
    testnet_snapshot_name: "{{ lookup('env', 'TESTNET_SNAPSHOT_NAME') }}"
  tasks:
    - name: Create local keypair
      user:
        name: "{{ lookup('env', 'USER') }}"
        generate_ssh_key: true
        ssh_key_file: "{{ keypair_path }}"
      register: local_keypair

    - name: Create remote keypair
      digital_ocean_sshkey:
        name: "{{ keypair_name }}"
        ssh_pub_key: "{{ local_keypair.ssh_public_key }}"
        state: present
      register: remote_keypair

    # did I mention DO's API is f... up ?
    - name: fetch the master capsule snapshot id
      shell: >-
        curl -X GET -H 'Content-Type: application/json' -H 'Authorization: Bearer {{ lookup('env', 'DO_API_KEY') }}'
        "https://api.digitalocean.com/v2/snapshots?page=1&per_page=1000&resource_type=droplet" |
        jq -r '.snapshots[] | select(.name=="{{ testnet_snapshot_name }}").id'
      register: snapshot_fetch_result

    - name: calculate image ids to work on
      set_fact:
        testnet_snapshot_id: "{{ snapshot_fetch_result.stdout }}"
      changed_when: true

    - name: Create molecule instance(s)
      digital_ocean:
        backups_enabled: false
        command: droplet
        name: "{{ item.name }}"
        unique_name: true
        region_id: "{{ item.region_id }}"
        image_id: "{{ testnet_snapshot_id }}"
        size_id: "{{ item.size_id }}"
        ssh_key_ids: "{{ remote_keypair.data.ssh_key.id }}"
        wait: true
        wait_timeout: 600
        state: present
      register: server
      with_items: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: digitalocean_jobs
      until: digitalocean_jobs.finished
      retries: 600
      with_items: "{{ server.results }}"

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.droplet.name }}",
          'address': "{{ item.droplet.ip_address }}",
          'user': "{{ ssh_user }}",
          'port': "{{ ssh_port }}",
          'identity_file': "{{ keypair_path }}",
          'droplet_id': "{{ item.droplet.id }}", }
      with_items: "{{ digitalocean_jobs.results }}"
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10
        timeout: 320
      with_items: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"
